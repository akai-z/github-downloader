#!/bin/sh

set -e

readonly GITHUB_API_VER="3"
readonly REPO_BASE_URL="https://api.github.com/repos/%s/%s"
readonly RELEASE_URL="${REPO_BASE_URL}/releases/%s"
readonly TARBALL_URL="${REPO_BASE_URL}/tarball/%s"
readonly DEFAULT_GIT_REF="master"
readonly LATEST_RELEASE="latest"
readonly SOURCE_TARBALL="github-repo-source.tar.gz"
readonly REQUIRED_DEPS="
curl
gzip
tar
"

GITHUB_USERNAME=""
GITHUB_REPO=""
GITHUB_TOKEN=""
GIT_REF=$DEFAULT_GIT_REF
SOURCE_PATH=""

source_download() {
  echo -e "\nDownloading..."

  source_path_set
  source_tarball
  source_tarball_extract

  echo -e "\nRepository source has been successfully downloaded.\n"
}

source_path_set() {
  source_dir_create
  cd "$SOURCE_PATH"
}

source_dir_create() {
  if [ ! -d "$SOURCE_PATH" ]; then
    mkdir -p "$SOURCE_PATH"
  elif [ "$(ls -A "$SOURCE_PATH")" ]; then
    error "Source directory must be empty."
  fi
}

source_tarball() {
  local source_url=$(source_url)

  if [ -z "$source_url" ]; then
    error "Could not obtain source URL."
  fi

  curl -fL -H "$(auth_header)" -o "$SOURCE_TARBALL" "$source_url" \
    || error "Could not obtain a downloadable source."
}

source_url() {
  local source_url=""

  if [ "$GIT_REF" == "$LATEST_RELEASE" ]; then
    source_url=$(latest_release_tarball_url)
  else
    source_url=$(tarball_url "$GIT_REF")
  fi

  echo "$source_url"
}

release_url() {
  echo "$(printf "$RELEASE_URL" "$GITHUB_USERNAME" "$GITHUB_REPO" "$GIT_REF")"
}

tarball_url() {
  local git_ref="$1"

  echo "$(printf "$TARBALL_URL" "$GITHUB_USERNAME" "$GITHUB_REPO" "$git_ref")"
}

release_url_data() {
  echo "$( \
    curl -fsL \
      -H "$(auth_header)" \
      -H "$(media_type_header ".json")" \
      "$(release_url)" \
  )"
}

latest_release_tarball_url() {
  local release_data=$(release_url_data)
  local tarball_url=""

  if [ "$release_data" ]; then
    tarball_url=$(echo "$release_data" | grep "tarball_url")

    if [ "$tarball_url" ]; then
      tarball_url=$(echo "$tarball_url" | cut -d '"' -f 4)
    fi
  fi

  echo "$tarball_url"
}

auth_header() {
  local header=""

  if [ "$GITHUB_TOKEN" ]; then
    header="Authorization: token $GITHUB_TOKEN"
  fi

  echo "$header"
}

media_type_header() {
  local property="$1"

  echo "Accept: application/vnd.github.v${GITHUB_API_VER}${property}"
}

source_tarball_extract() {
  tar -zxf "$SOURCE_TARBALL" --strip=1
  rm "$SOURCE_TARBALL"
}

deps_check() {
  local dep

  for dep in $REQUIRED_DEPS
  do
    if [ ! -x "$(command -v "$dep")" ]; then
      error "$(printf "\"%s\" not found." "$dep")"
    fi
  done
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --github-username=*)   GITHUB_USERNAME="${i#*=}";;
      --github-repo=*)       GITHUB_REPO="${i#*=}";;
      --source-path=*)       SOURCE_PATH="${i#*=}";;
      --github-token=*)      GITHUB_TOKEN="${i#*=}";;
      --github-token)        read_github_token;;
      --git-ref=*)           GIT_REF="${i#*=}";;
      *)                     usage;;
    esac
  done
}

read_github_token() {
  read -s -p "Enter GitHub Token: " GITHUB_TOKEN
}

args_validation() {
  if [ -z "$GITHUB_USERNAME" ]; then
    error "GitHub username is missing."
  fi

  if [ -z "$GITHUB_REPO" ]; then
    error "GitHub repository name is missing."
  fi

  if [ -z "$SOURCE_PATH" ]; then
    error "Source download directory path is missing."
  fi
}

usage() {
  cat <<Usage

usage: github-downloader \\
         --github-username=<username> \\
         --github-repo=<repo> \\
         --source-path=<path> \\
         [--github-token] Or [--github-token=<token>] \\
         [--git-ref=<ref>]

  --github-username
      GitHub user name.

  --github-repo
      GitHub repository name.

  --source-path
      GitHub repository source download directory path.

  --github-token
      GitHub access token can be used to access private repositories,
      and increase GitHub API rate limit. This is optional.
      The token can be prompted for user to input in a shell,
      if it's a flag (--github-token) without a value (Recommended).
      Or it can be provided through the command as an argument with a value (--github-token=<token>).

  --git-ref
      GitHub repository Git reference.
      This is optional. Default: "${DEFAULT_GIT_REF}".
      (It is required, if the default reference is not found.)

      Acceptable git-ref values:
        * Any published release/tag name.
        * Any valid Git branch.
        * Any valid Git commit hash.
        * "${LATEST_RELEASE}": Latest stable published release.

Usage

  exit 0
}

error() {
  echo -e >&2 "\n$1\n"
  exit 1
}

main() {
  deps_check
  read_args "$@"
  args_validation
  source_download
}

main "$@"
